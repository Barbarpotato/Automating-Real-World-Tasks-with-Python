import json
import locale
import sys
import reports
import emails


def load_data(filename):
    """Loads the contents of filename as a JSON file."""
    with open(filename) as json_file:
        data = json.load(json_file)
    return data


def format_car(car):
    """Given a car dictionary, returns a nicely formatted name."""
    return "{} {} ({})".format(car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
    """Analyzes the data, looking for maximums.

    Returns a list of lines that summarize the information.
    """
    max_revenue = {"revenue": 0}
    max_sales, car_name = 0, ""
    popular_year, get_popular_year, get_year = {}, 0, 0
    for item in data:
        # Calculate the revenue generated by this model (price * total_sales)
        # We need to convert the price from "$1234.56" to 1234.56
        item_price = locale.atof(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price
        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item
        # handle max sales
        if item["total_sales"] > max_sales:
            max_sales = item["total_sales"]
            car_name = item["car"]["car_make"] + " " + item["car"]["car_model"]
        # handle most popular car_year
        car_year = item["car"]["car_year"]
        sales = item["total_sales"]
        if car_year in popular_year.keys():
            popular_year[car_year] += sales
        else:
            popular_year[car_year] = sales

        for key, value in popular_year.items():
            if get_popular_year <= value:
                get_popular_year = value
                get_year = key

        summary = [
            "The {} generated the most revenue: ${}".format(
                format_car(max_revenue["car"]), max_revenue["revenue"]
            ),
            "The {} had the most sales: {}".format(
                car_name, max_sales
            ),  # car_model, and total_sales
            "The most popular year was {} with {} sales.".format(
                get_year, get_popular_year
            ),  # year , and total sales in that year
        ]

    return summary


def cars_dict_to_table(car_data):
    """Turns the data in car_data into a list of lists."""
    table_data = [["ID", "Car", "Price", "Total Sales"]]
    for item in car_data:
        table_data.append(
            [item["id"], format_car(item["car"]), item["price"], item["total_sales"]]
        )
    return table_data


def main(argv):
    """Process the JSON data and generate a full report out of it."""
    data = load_data(
        "C:\\Users\\Darmawan\\OneDrive\\Documents\\Python\\Files\\Python-Automation\\Week3 Assesment\\car_sales.json"
    )
    summary = process_data(data)
    # print(summary) --> to check if the output True/False

    # Turn this into a PDF report
    cars_title = "Sales summary for last month"
    summary_desc = "{}<br/>{}<br/>{}<br/>".format(summary[0], summary[1], summary[2])
    cars_table = cars_dict_to_table(data)
    reports.generate(
        "C:\\Users\\Darmawan\\cars.pdf", cars_title, summary_desc, cars_table
    )

    # Send the PDF report as an email attachment
    send_user = "darmawanjr88@gmail.com"
    receive_user = "darmakencanaabadi@gmail.com"
    subject_line = "Sales summary for last month"
    email_body = "{}\n{}\n{}".format(summary[0], summary[1], summary[2])
    path_file = "C:\\Users\\Darmawan\\cars.pdf"
    load_message = emails.generate(
        send_user, receive_user, subject_line, email_body, path_file
    )
    emails.send(load_message, send_user)


if __name__ == "__main__":
    main(sys.argv)
